import React, { useEffect, useMemo, useRef, useState } from "react";

// —— Utility: seeded RNG so the star field is stable between renders —— //
function mulberry32(seed: number) {
  return function () {
    let t = (seed += 0x6D2B79F5);
    t = Math.imul(t ^ (t >>> 15), t | 1);
    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
  };
}

// —— Background: Starry sky with neon supernovas (static) —— //
function Starfield() {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const draw = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const dpr = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
    const { innerWidth: w, innerHeight: h } = window;
    canvas.width = w * dpr;
    canvas.height = h * dpr;
    canvas.style.width = w + "px";
    canvas.style.height = h + "px";
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    ctx.scale(dpr, dpr);

    // Background base — deep space
    const grd = ctx.createLinearGradient(0, 0, 0, h);
    grd.addColorStop(0, "#05060a");
    grd.addColorStop(1, "#0b0f1a");
    ctx.fillStyle = grd;
    ctx.fillRect(0, 0, w, h);

    // Stars (stable with seeded RNG)
    const rand = mulberry32(1337);
    ctx.save();
    for (let i = 0; i < 400; i++) {
      const x = rand() * w;
      const y = rand() * h;
      const r = Math.max(0.4, rand() * 1.6);
      ctx.globalAlpha = 0.6 + rand() * 0.4;
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI * 2);
      ctx.fillStyle = "#e6f1ff";
      ctx.fill();
    }
    ctx.restore();

    // Supernovas (neon blue, pink, green) — soft radial glows
    const bursts = [
      { x: Math.floor(w * 0.18), y: Math.floor(h * 0.28), r: Math.min(w, h) * 0.25, color: "#00E5FF" },
      { x: Math.floor(w * 0.78), y: Math.floor(h * 0.32), r: Math.min(w, h) * 0.28, color: "#FF007F" },
      { x: Math.floor(w * 0.52), y: Math.floor(h * 0.78), r: Math.min(w, h) * 0.30, color: "#39FF14" },
    ];
    bursts.forEach(({ x, y, r, color }) => {
      const g = ctx.createRadialGradient(x, y, 0, x, y, r);
      g.addColorStop(0, `${color}A8`); // inner glow
      g.addColorStop(0.4, `${color}22`);
      g.addColorStop(1, "#00000000");
      ctx.fillStyle = g as any;
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI * 2);
      ctx.fill();
    });
  };

  useEffect(() => {
    draw();
    const onResize = () => draw();
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);

  return (
    <canvas
      ref={canvasRef}
      aria-hidden
      className="fixed inset-0 -z-10 h-full w-full select-none"
    />
  );
}

// —— Simple hover-tilt + glass card —— //
function GlassCard({ children, className = "" }: { children: React.ReactNode; className?: string }) {
  const ref = useRef<HTMLDivElement | null>(null);
  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const onMove = (e: MouseEvent) => {
      const rect = el.getBoundingClientRect();
      const px = (e.clientX - rect.left) / rect.width - 0.5;
      const py = (e.clientY - rect.top) / rect.height - 0.5;
      el.style.setProperty("--rx", String(py * -4));
      el.style.setProperty("--ry", String(px * 6));
    };
    const onLeave = () => {
      el.style.setProperty("--rx", "0");
      el.style.setProperty("--ry", "0");
    };
    el.addEventListener("mousemove", onMove);
    el.addEventListener("mouseleave", onLeave);
    return () => {
      el.removeEventListener("mousemove", onMove);
      el.removeEventListener("mouseleave", onLeave);
    };
  }, []);
  return (
    <div
      ref={ref}
      style={{ transform: "perspective(1000px) rotateX(var(--rx,0deg)) rotateY(var(--ry,0deg))" }}
      className={
        "relative rounded-3xl border border-white/10 bg-white/5 p-5 shadow-2xl backdrop-blur-xl transition-all duration-300 hover:bg-white/10 hover:shadow-[0_10px_40px_rgba(0,0,0,0.35)] " +
        className
      }
    >
      {/* glow ring */}
      <div className="pointer-events-none absolute -inset-px rounded-3xl bg-[radial-gradient(circle_at_top_left,rgba(0,229,255,.25),rgba(63,0,255,0)_40%),radial-gradient(circle_at_bottom_right,rgba(255,0,127,.2),rgba(63,0,255,0)_40%)]" />
      <div className="relative z-10">{children}</div>
    </div>
  );
}

// —— Types —— //
interface Texture {
  id: string;
  name: string;
  priceDelta?: number;
  // image URL for preview; fallbackColor if missing
  image?: string;
  fallbackColor?: string;
}

const TEXTURES: Texture[] = [
  { id: "plain", name: "Plain (Upload Art)", fallbackColor: "#f3f4f6" },
  { id: "cosmic-nova", name: "Cosmic Nova", image: "/photos/cosmic-nova.jpg" },
  { id: "volcano-lava", name: "Volcano Lava", image: "/photos/volcano-lava.jpg" },
  { id: "ice-crystal", name: "Ice Crystal", image: "/photos/ice-crystal.jpg" },
  { id: "neon-lattice", name: "Neon Lattice", image: "/photos/neon-lattice.jpg" },
  { id: "camo-volt", name: "Camo Volt", image: "/textures/camo-volt.jpg" },
  { id: "dragon-fire", name: "Dragon Fire Scales", image: "/textures/dragon-fire.jpg" },
  { id: "sea-dragon", name: "Sea Dragon Scales", image: "/textures/sea-dragon.jpg" },
  { id: "caramel-croc", name: "Caramel Croc", image: "/textures/caramel-croc.jpg" },
  { id: "green-viper", name: "Green Viper", image: "/textures/green-viper.jpg" },
  { id: "carbon", name: "Carbon Weave", image: "/textures/carbon.jpg" },
];

// Public product photos shown in the gallery
const PRODUCT_PHOTOS: { src: string; alt: string }[] = [
  { src: "/photos/cosmic-nova.jpg", alt: "Cosmic Nova lid on navy frame" },
  { src: "/photos/volcano-lava.jpg", alt: "Volcanic lava lid on black frame" },
  { src: "/photos/ice-crystal.jpg", alt: "Ice crystal lid on aqua frame" },
  { src: "/photos/neon-lattice.jpg", alt: "Neon green lattice lid" },
  { src: "/textures/camo-volt.jpg", alt: "Camo Volt texture" },
  { src: "/textures/dragon-fire.jpg", alt: "Dragon Fire Scales texture" },
  { src: "/textures/sea-dragon.jpg", alt: "Sea Dragon Scales texture" },
  { src: "/textures/caramel-croc.jpg", alt: "Caramel Croc texture" },
  { src: "/textures/green-viper.jpg", alt: "Green Viper texture" },
  { src: "/textures/carbon.jpg", alt: "Carbon weave texture" }
];

const BASE_PRICE = 29.99; // GBP, adjust as needed

// —— Lid Editor (canvas) —— //
function LidEditor({
  chosenTexture,
  onSnapshot,
  artImage,
  setArtImage,
}: {
  chosenTexture: Texture;
  onSnapshot: (dataUrl: string) => void;
  artImage: HTMLImageElement | null;
  setArtImage: (img: HTMLImageElement | null) => void;
}) {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const [scale, setScale] = useState(1);
  const [rotation, setRotation] = useState(0);
  const [pos, setPos] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const dragRef = useRef({ x: 0, y: 0 });
  const textureImgRef = useRef<HTMLImageElement | null>(null);

  // Load texture image if provided
  useEffect(() => {
    if (!chosenTexture.image) {
      textureImgRef.current = null;
      redraw();
      return;
    }
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
      textureImgRef.current = img;
      redraw();
    };
    img.src = chosenTexture.image;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [chosenTexture.id]);

  const handleFile = (file: File) => {
    const url = URL.createObjectURL(file);
    const img = new Image();
    img.onload = () => {
      setArtImage(img);
      URL.revokeObjectURL(url);
      redraw();
    };
    img.src = url;
  };

  const onPointerDown = (e: React.PointerEvent<HTMLCanvasElement>) => {
    setIsDragging(true);
    dragRef.current = { x: e.clientX - pos.x, y: e.clientY - pos.y };
  };
  const onPointerMove = (e: React.PointerEvent<HTMLCanvasElement>) => {
    if (!isDragging) return;
    setPos({ x: e.clientX - dragRef.current.x, y: e.clientY - dragRef.current.y });
  };
  const onPointerUp = () => setIsDragging(false);

  const redraw = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const dpr = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
    const W = 640; // editor logical size (square)
    const H = 640;
    canvas.width = W * dpr;
    canvas.height = H * dpr;
    canvas.style.width = W + "px";
    canvas.style.height = H + "px";
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    ctx.scale(dpr, dpr);

    // board background
    ctx.clearRect(0, 0, W, H);
    ctx.fillStyle = "#0b0f1a";
    ctx.fillRect(0, 0, W, H);

    // Lid rounded rect
    const inset = 28;
    const r = 34;
    const x = inset, y = inset, w = W - inset * 2, h = H - inset * 2;

    ctx.save();
    // clip rounded rect
    const rr = new Path2D();
    rr.moveTo(x + r, y);
    rr.arcTo(x + w, y, x + w, y + h, r);
    rr.arcTo(x + w, y + h, x, y + h, r);
    rr.arcTo(x, y + h, x, y, r);
    rr.arcTo(x, y, x + w, y, r);
    rr.closePath();
    ctx.clip(rr);

    // texture fill
    if (textureImgRef.current) {
      const img = textureImgRef.current;
      // cover the area
      const scaleTexture = Math.max(w / img.width, h / img.height);
      const tw = img.width * scaleTexture;
      const th = img.height * scaleTexture;
      const tx = x + (w - tw) / 2;
      const ty = y + (h - th) / 2;
      ctx.drawImage(img, tx, ty, tw, th);
    } else {
      ctx.fillStyle = chosenTexture.fallbackColor || "#eceff1";
      ctx.fillRect(x, y, w, h);
    }

    // subtle gloss
    const gloss = ctx.createLinearGradient(0, y, 0, y + h);
    gloss.addColorStop(0, "rgba(255,255,255,0.25)");
    gloss.addColorStop(0.08, "rgba(255,255,255,0.06)");
    gloss.addColorStop(0.4, "rgba(255,255,255,0.0)");
    ctx.fillStyle = gloss;
    ctx.fillRect(x, y, w, h);

    // artwork overlay
    if (artImage) {
      ctx.save();
      ctx.translate(x + w / 2 + pos.x, y + h / 2 + pos.y);
      ctx.rotate((rotation * Math.PI) / 180);
      const scaleArt = scale * Math.min(w / artImage.width, h / artImage.height);
      const aw = artImage.width * scaleArt;
      const ah = artImage.height * scaleArt;
      ctx.drawImage(artImage, -aw / 2, -ah / 2, aw, ah);
      ctx.restore();
    }

    // safe area + bleed guides
    ctx.restore();
    ctx.strokeStyle = "rgba(255,255,255,0.25)";
    ctx.lineWidth = 2;
    ctx.setLineDash([6, 8]);
    ctx.strokeRect(x + 16, y + 16, w - 32, h - 32);
  };

  // redraw when controls change
  useEffect(() => { redraw(); }, [artImage, pos.x, pos.y, scale, rotation, chosenTexture.id]);

  // Export snapshot for cart thumbnails / print
  const handleSnapshot = () => {
    const dataUrl = canvasRef.current?.toDataURL("image/png", 1.0) || "";
    onSnapshot(dataUrl);
  };

  return (
    <div className="grid gap-6 lg:grid-cols-[auto_1fr]">
      <div>
        <GlassCard className="p-3">
          <canvas
            ref={canvasRef}
            onPointerDown={onPointerDown}
            onPointerMove={onPointerMove}
            onPointerUp={onPointerUp}
            onPointerLeave={onPointerUp}
            className="mx-auto h-[640px] w-[640px] max-w-full touch-pan-y cursor-grab rounded-3xl"
          />
        </GlassCard>
        <div className="mt-3 text-center text-xs text-white/60">Drag to reposition artwork · Use sliders to scale & rotate</div>
      </div>

      <div className="grid content-start gap-4">
        <GlassCard>
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-white/90">Artwork</div>
              <div className="text-xs text-white/60">PNG/JPG/SVG up to 25MB. Recommended: square ≥ 2048px.</div>
            </div>
            <label className="relative inline-flex cursor-pointer items-center overflow-hidden rounded-xl bg-white/10 px-4 py-2 text-sm font-medium text-white shadow hover:bg-white/20">
              <input type="file" accept="image/*" className="absolute inset-0 cursor-pointer opacity-0" onChange={(e) => {
                const f = e.target.files?.[0];
                if (f) handleFile(f);
              }} />
              Upload
            </label>
          </div>
          <div className="mt-4 grid grid-cols-3 gap-3">
            <div className="col-span-3">
              <label className="mb-1 block text-xs text-white/70">Scale</label>
              <input type="range" min={0.2} max={3} step={0.01} value={scale} onChange={(e) => setScale(parseFloat(e.target.value))} className="w-full" />
            </div>
            <div className="col-span-3">
              <label className="mb-1 block text-xs text-white/70">Rotation</label>
              <input type="range" min={-180} max={180} step={1} value={rotation} onChange={(e) => setRotation(parseFloat(e.target.value))} className="w-full" />
            </div>
            <div className="col-span-3 flex items-center gap-2">
              <button className="rounded-xl bg-white/10 px-3 py-2 text-sm text-white hover:bg-white/20" onClick={() => { setScale(1); setRotation(0); setPos({ x: 0, y: 0 }); }}>Reset</button>
              <button className="rounded-xl bg-white/10 px-3 py-2 text-sm text-white hover:bg-white/20" onClick={handleSnapshot}>Save Preview</button>
            </div>
          </div>
        </GlassCard>

        <GlassCard>
          <div className="text-sm font-medium text-white/90">Texture</div>
          <div className="mt-3 grid grid-cols-2 gap-3 sm:grid-cols-3">
            {TEXTURES.map((t) => (
              <label key={t.id} className="group relative block cursor-pointer overflow-hidden rounded-2xl border border-white/10 bg-black/20 p-2 hover:border-white/30">
                <input type="radio" name="texture" className="peer sr-only" defaultChecked={t.id === "plain"} onChange={() => {
                  // @ts-ignore attach id for parent state via custom event
                  const ev = new CustomEvent("texture:change", { detail: t });
                  window.dispatchEvent(ev);
                }} />
                <div className="relative h-28 w-full rounded-xl bg-zinc-800">
                  {t.image ? (
                    <img src={t.image} alt={t.name} className="h-full w-full rounded-xl object-cover" />
                  ) : (
                    <div className="h-full w-full rounded-xl" style={{ background: `linear-gradient(135deg, ${t.fallbackColor} 0%, #e5e7eb 100%)` }} />
                  )}
                  <div className="pointer-events-none absolute inset-0 rounded-xl ring-1 ring-inset ring-white/10 peer-checked:ring-2 peer-checked:ring-[#00E5FF]" />
                </div>
                <div className="mt-2 text-xs text-white/80">{t.name}</div>
              </label>
            ))}
          </div>
        </GlassCard>
      </div>
    </div>
  );
}

// —— Lightbox for product photos —— //
function Lightbox({ photos, index, onClose }: { photos: { src: string; alt: string }[]; index: number; onClose: () => void }) {
  if (index < 0) return null;
  const photo = photos[index];
  return (
    <div className="fixed inset-0 z-[60] bg-black/80 backdrop-blur-sm">
      <button aria-label="Close" onClick={onClose} className="absolute right-6 top-6 rounded-full bg-white/10 px-3 py-1 text-white hover:bg-white/20">Close</button>
      <div className="flex h-full items-center justify-center p-6">
        <img src={photo.src} alt={photo.alt} className="max-h-full max-w-full rounded-2xl shadow-2xl" />
      </div>
    </div>
  );
}

// —— Cart + Checkout (front-end only) —— //
interface CartItem { id: string; name: string; price: number; qty: number; preview?: string; textureId: string; }

function useLocalStorage<T>(key: string, initial: T) {
  const [value, setValue] = useState<T>(() => {
    try {
      const raw = localStorage.getItem(key);
      return raw ? (JSON.parse(raw) as T) : initial;
    } catch { return initial; }
  });
  useEffect(() => { localStorage.setItem(key, JSON.stringify(value)); }, [key, value]);
  return [value, setValue] as const;
}

function Cart({ open, onClose, items, setItems }: { open: boolean; onClose: () => void; items: CartItem[]; setItems: (items: CartItem[]) => void; }) {
  const total = items.reduce((s, it) => s + it.price * it.qty, 0);
  const [stage, setStage] = useState<"cart" | "checkout" | "success">("cart");

  const [form, setForm] = useState({ name: "", email: "", address: "" });

  useEffect(() => { if (open) setStage("cart"); }, [open]);

  return (
    <div className={`fixed inset-0 z-50 ${open ? "" : "pointer-events-none"}`}>
      <div className={`absolute inset-0 bg-black/60 backdrop-blur-sm transition-opacity ${open ? "opacity-100" : "opacity-0"}`} onClick={onClose} />
      <div className={`absolute right-0 top-0 h-full w-full max-w-md transform transition-transform ${open ? "translate-x-0" : "translate-x-full"}`}>
        <div className="flex h-full flex-col gap-4 bg-[#0b0f1a]/95 p-6 text-white shadow-2xl">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold">{stage === "cart" ? "Your Cart" : stage === "checkout" ? "Checkout" : "Order Complete"}</h2>
            <button onClick={onClose} className="rounded-full bg-white/10 px-3 py-1 text-sm hover:bg-white/20">Close</button>
          </div>

          {stage === "cart" && (
            <>
              <div className="flex-1 space-y-3 overflow-auto">
                {items.length === 0 && <div className="text-white/60">Your cart is empty.</div>}
                {items.map((it, i) => (
                  <div key={i} className="flex items-center gap-3 rounded-xl border border-white/10 p-3">
                    <img src={it.preview || "/placeholder.png"} alt="preview" className="h-16 w-16 rounded-lg object-cover" />
                    <div className="flex-1">
                      <div className="text-sm font-medium">DripBox — {it.name}</div>
                      <div className="text-xs text-white/60">Texture: {it.textureId}</div>
                      <div className="mt-1 text-sm">£{it.price.toFixed(2)}</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <button className="rounded-full bg-white/10 px-2 py-1" onClick={() => setItems(items.map((x, idx) => idx === i ? { ...x, qty: Math.max(1, x.qty - 1) } : x))}>−</button>
                      <div className="w-6 text-center text-sm">{it.qty}</div>
                      <button className="rounded-full bg-white/10 px-2 py-1" onClick={() => setItems(items.map((x, idx) => idx === i ? { ...x, qty: x.qty + 1 } : x))}>+</button>
                      <button className="ml-2 rounded-xl bg-white/10 px-3 py-1 text-xs hover:bg-white/20" onClick={() => setItems(items.filter((_, idx) => idx !== i))}>Remove</button>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-2 border-t border-white/10 pt-3">
                <div className="flex items-center justify-between text-sm">
                  <div className="text-white/70">Subtotal</div>
                  <div>£{total.toFixed(2)}</div>
                </div>
                <button disabled={!items.length} onClick={() => setStage("checkout")} className="mt-3 w-full rounded-2xl bg-white px-5 py-3 font-semibold text-black disabled:cursor-not-allowed disabled:opacity-50">Checkout</button>
                <div className="mt-2 text-center text-xs text-white/50">Demo checkout (no payment). Hook Stripe here.</div>
              </div>
            </>
          )}

          {stage === "checkout" && (
            <>
              <div className="flex-1 space-y-3 overflow-auto">
                <input className="w-full rounded-xl border border-white/10 bg-white/5 p-3 outline-none placeholder:text-white/40" placeholder="Full name" value={form.name} onChange={(e) => setForm({ ...form, name: e.target.value })} />
                <input type="email" className="w-full rounded-xl border border-white/10 bg-white/5 p-3 outline-none placeholder:text-white/40" placeholder="Email" value={form.email} onChange={(e) => setForm({ ...form, email: e.target.value })} />
                <textarea className="h-32 w-full rounded-xl border border-white/10 bg-white/5 p-3 outline-none placeholder:text-white/40" placeholder="Shipping address" value={form.address} onChange={(e) => setForm({ ...form, address: e.target.value })} />
                <div className="rounded-xl border border-white/10 p-3 text-sm">
                  <div className="mb-2 font-medium">Order Summary</div>
                  {items.map((it, i) => (
                    <div key={i} className="flex items-center justify-between text-white/80">
                      <span>{it.name} × {it.qty}</span>
                      <span>£{(it.price * it.qty).toFixed(2)}</span>
                    </div>
                  ))}
                  <div className="mt-2 border-t border-white/10 pt-2 font-semibold">Total £{total.toFixed(2)}</div>
                </div>
              </div>
              <div>
                <button onClick={() => setStage("success")} className="w-full rounded-2xl bg-white px-5 py-3 font-semibold text-black">Place Order</button>
                <button onClick={() => setStage("cart")} className="mt-2 w-full rounded-2xl bg-white/10 px-5 py-3 font-semibold text-white hover:bg-white/20">Back</button>
                <div className="mt-2 text-center text-xs text-white/50">In production, redirect to Stripe Checkout and handle the webhook.</div>
              </div>
            </>
          )}

          {stage === "success" && (
            <div className="flex flex-1 flex-col items-center justify-center gap-4 text-center">
              <div className="text-3xl font-semibold">Thank you! 🎉</div>
              <div className="max-w-sm text-white/70">Your order has been placed. A confirmation email will be sent shortly.</div>
              <button onClick={() => { setItems([]); onClose(); }} className="rounded-2xl bg-white px-5 py-3 font-semibold text-black">Close</button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// —— Main App —— //
export default function App() {
  const [texture, setTexture] = useState<Texture>(TEXTURES[0]);
  const [artImg, setArtImage] = useState<HTMLImageElement | null>(null);
  const [snapshot, setSnapshot] = useState<string>("");
  const [cartOpen, setCartOpen] = useState(false);
  const [items, setItems] = useLocalStorage<CartItem[]>("dripbox.cart", []);
  const [lightboxIdx, setLightboxIdx] = useState(-1);

  useEffect(() => {
    const handler = (e: any) => setTexture(e.detail as Texture);
    window.addEventListener("texture:change", handler as any);
    return () => window.removeEventListener("texture:change", handler as any);
  }, []);

  const addToCart = () => {
    const it: CartItem = { id: crypto.randomUUID(), name: "Custom Box Lid", price: BASE_PRICE + (texture.priceDelta || 0), qty: 1, preview: snapshot, textureId: texture.name };
    setItems([...items, it]);
    setCartOpen(true);
  };

  return (
    <div className="min-h-screen text-white">
      <Starfield />

      {/* Header */}
      <header className="sticky top-0 z-40 backdrop-blur-md">
        <div className="mx-auto flex max-w-7xl items-center justify-between px-6 py-4">
          <div className="flex items-center gap-3">
            <div className="h-8 w-8 rounded-xl bg-[conic-gradient(from_180deg,#00E5FF_0deg,#39FF14_120deg,#FF007F_240deg,#00E5FF_360deg)] shadow-lg" />
            <div className="text-lg font-semibold tracking-tight">DripBox</div>
          </div>
          <nav className="hidden gap-6 text-sm md:flex">
            <a className="text-white/80 hover:text-white" href="#design">Design</a>
            <a className="text-white/80 hover:text-white" href="#faq">FAQ</a>
            <a className="text-white/80 hover:text-white" href="#contact">Contact</a>
          </nav>
          <button onClick={() => setCartOpen(true)} className="rounded-full bg-white/10 px-3 py-2 text-sm hover:bg-white/20">Cart ({items.length})</button>
        </div>
      </header>

      {/* Hero */}
      <section className="mx-auto max-w-7xl px-6 pb-10 pt-14 md:pb-20 md:pt-24">
        <div className="grid items-center gap-10 md:grid-cols-2">
          <div>
            <h1 className="text-balance bg-gradient-to-br from-white via-white to-white/70 bg-clip-text text-4xl font-semibold tracking-tight text-transparent sm:text-5xl md:text-6xl">
              One Product. Infinite Lids.
            </h1>
            <p className="mt-5 max-w-xl text-pretty text-lg text-white/70">
              Design a 3D‑printed box lid that’s uniquely yours. Choose a premium texture or upload your own artwork, then drag, scale, and rotate to perfection.
            </p>
            <div className="mt-8 flex flex-wrap items-center gap-3">
              <a href="#design" className="rounded-2xl bg-white px-6 py-3 font-semibold text-black shadow-xl">Start Designing</a>
              <a href="#faq" className="rounded-2xl bg-white/10 px-6 py-3 font-semibold text-white backdrop-blur hover:bg-white/20">Learn more</a>
            </div>
          </div>

          <GlassCard className="p-0">
            <img src="/hero-lids.png" alt="DripBox hero" className="h-[420px] w-full rounded-3xl object-cover" />
          </GlassCard>
        </div>
      </section>

      {/* Designer */}
      <section id="design" className="mx-auto max-w-7xl px-6 pb-24">
        <div className="mb-6 flex items-end justify-between">
          <div>
            <h2 className="text-2xl font-semibold tracking-tight">Design Your Lid</h2>
            <p className="text-white/60">Base price £{BASE_PRICE.toFixed(2)} · Ships in 3–5 days</p>
          </div>
          <div className="text-right">
            <div className="text-sm text-white/70">Texture: <span className="font-medium text-white">{texture.name}</span></div>
            <div className="text-sm text-white/70">Price: <span className="font-medium text-white">£{(BASE_PRICE + (texture.priceDelta || 0)).toFixed(2)}</span></div>
          </div>
        </div>

        <LidEditor chosenTexture={texture} artImage={artImg} setArtImage={setArtImage} onSnapshot={(url) => setSnapshot(url)} />

        <div className="mt-8 flex flex-wrap items-center gap-3">
          <button onClick={addToCart} className="rounded-2xl bg-white px-6 py-3 font-semibold text-black shadow-xl disabled:opacity-50" disabled={!snapshot}>Add to Cart</button>
          <div className="text-sm text-white/60">Tip: Click “Save Preview” in the editor to generate a cart thumbnail.</div>
        </div>
      </section>

      {/* Info Cards */}
      <section className="mx-auto max-w-7xl px-6 pb-24">
        <div className="grid gap-6 md:grid-cols-3">
          <GlassCard>
            <div className="text-lg font-semibold">Premium Textures</div>
            <p className="mt-2 text-sm text-white/70">From carbon weave to dragon scales, each texture renders with depth and gloss for a realistic preview.</p>
          </GlassCard>
          <GlassCard>
            <div className="text-lg font-semibold">High‑Res Printing</div>
            <p className="mt-2 text-sm text-white/70">We generate a print‑ready file (up to 8K) so your design stays razor‑sharp on the 200×190 mm lid area.</p>
          </GlassCard>
          <GlassCard>
            <div className="text-lg font-semibold">Fast Fulfilment</div>
            <p className="mt-2 text-sm text-white/70">Most orders ship within 3–5 business days. Local pickup available.</p>
          </GlassCard>
        </div>
      </section>

      {/* Product Photos */}
      <section className="mx-auto max-w-7xl px-6 pb-24">
        <h3 className="mb-6 text-2xl font-semibold">Product Photos</h3>
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {PRODUCT_PHOTOS.map((p, i) => (
            <GlassCard key={i} className="overflow-hidden p-0">
              <button onClick={() => setLightboxIdx(i)} className="group block">
                <img src={p.src} alt={p.alt} className="h-64 w-full object-cover transition-transform duration-300 group-hover:scale-[1.03]" />
              </button>
              <div className="p-3 text-sm text-white/70">{p.alt}</div>
            </GlassCard>
          ))}
        </div>
      </section>

      {/* FAQ */}
      <section id="faq" className="mx-auto max-w-5xl px-6 pb-24">
        <h3 className="mb-6 text-2xl font-semibold">FAQ</h3>
        <div className="space-y-4">
          <GlassCard>
            <div className="text-sm font-medium">What image size works best?</div>
            <p className="mt-2 text-sm text-white/70">Square images ≥ 2048×2048 px are recommended. Larger files (up to ~8K) look even better.</p>
          </GlassCard>
          <GlassCard>
            <div className="text-sm font-medium">Can I use transparent PNGs?</div>
            <p className="mt-2 text-sm text-white/70">Yes. Transparency is preserved so your chosen texture can show through.</p>
          </GlassCard>
          <GlassCard>
            <div className="text-sm font-medium">How do I pay?</div>
            <p className="mt-2 text-sm text-white/70">This demo uses a mock checkout. When you deploy, connect Stripe Checkout in <code className="rounded bg-white/10 px-1">/api/checkout</code> and the cart will redirect there.</p>
          </GlassCard>
        </div>
      </section>

      {/* Footer */}
      <footer id="contact" className="border-t border-white/10 py-12 text-center text-sm text-white/60">
        <div className="mx-auto max-w-7xl px-6">
          © {new Date().getFullYear()} DripBox · Built with ❤️ · Contact: hello@dripbox.local
        </div>
      </footer>

      <Cart open={cartOpen} onClose={() => setCartOpen(false)} items={items} setItems={setItems} />
      <Lightbox photos={PRODUCT_PHOTOS} index={lightboxIdx} onClose={() => setLightboxIdx(-1)} />
    </div>
  );
}
